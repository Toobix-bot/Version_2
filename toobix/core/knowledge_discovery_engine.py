"""
Knowledge Discovery Center - Phase 5.2
Interaktive Wissensbasis zum Durchklicken und Erkunden
"""

import json
import os
from datetime import datetime
from typing import List, Dict, Any, Optional, Tuple
from dataclasses import dataclass, asdict
import logging

logger = logging.getLogger(__name__)

@dataclass
class KnowledgeItem:
    """Einzelnes Wissenselement"""
    id: str
    title: str
    description: str
    category: str
    tags: List[str]
    content: str
    examples: List[str]
    related_items: List[str]
    difficulty_level: str  # 'beginner', 'intermediate', 'advanced'
    last_updated: str
    usage_count: int = 0
    user_rating: float = 0.0

@dataclass
class KnowledgeCategory:
    """Wissens-Kategorie"""
    id: str
    name: str
    description: str
    icon: str
    items: List[KnowledgeItem]
    subcategories: List[str] = None

@dataclass
class LearningPath:
    """Strukturierter Lernpfad"""
    id: str
    title: str
    description: str
    steps: List[str]  # Knowledge Item IDs
    estimated_time: int  # Minuten
    prerequisites: List[str]
    completion_rate: float = 0.0

class KnowledgeDiscoveryEngine:
    """
    Hauptengine f√ºr das Knowledge Discovery Center
    Verwaltet alle Wissensinhalte und Navigationswege
    """
    
    def __init__(self):
        self.knowledge_base = {}
        self.categories = {}
        self.learning_paths = {}
        self.user_progress = {}
        self.search_index = {}
        
        # Initialize with base knowledge
        self._initialize_knowledge_base()
        self._build_search_index()
        
        logger.info("üìö Knowledge Discovery Engine initialisiert")
    
    def _initialize_knowledge_base(self):
        """Initialisiert die Basis-Wissensbasis"""
        
        # === SYSTEM FEATURES ===
        system_items = [
            KnowledgeItem(
                id="system_monitoring",
                title="System-√úberwachung",
                description="Echtzeit√ºberwachung von CPU, Memory, Disk und Netzwerk",
                category="system",
                tags=["monitoring", "performance", "hardware"],
                content="""
üñ•Ô∏è SYSTEM-√úBERWACHUNG

Die System-√úberwachung bietet dir vollst√§ndige Transparenz √ºber deinen Computer:

üìä √úBERWACHTE METRIKEN:
‚Ä¢ CPU-Auslastung (in Echtzeit)
‚Ä¢ Arbeitsspeicher-Nutzung
‚Ä¢ Festplatten-Speicher und I/O
‚Ä¢ Netzwerk-Traffic
‚Ä¢ Laufende Prozesse
‚Ä¢ System-Temperatur (falls verf√ºgbar)

üöÄ AUTOMATISCHE OPTIMIERUNG:
‚Ä¢ Erkennt Performance-Probleme
‚Ä¢ Schl√§gt Optimierungen vor
‚Ä¢ Kann automatisch aufr√§umen
‚Ä¢ √úberwacht kritische Schwellwerte

üí° PROAKTIVE WARNUNGEN:
‚Ä¢ CPU √ºber 90% f√ºr >5 Minuten
‚Ä¢ Memory √ºber 85%
‚Ä¢ Festplatte √ºber 90% voll
‚Ä¢ Ungew√∂hnliche Netzwerkaktivit√§t
                """,
                examples=[
                    "Sage: 'System-Status' um aktuellen Zustand zu sehen",
                    "Sage: 'Performance optimieren' f√ºr automatische Verbesserungen",
                    "Sage: 'Erweiterte √úberwachung' f√ºr detaillierte Analyse"
                ],
                related_items=["task_manager", "performance_optimization"],
                difficulty_level="beginner",
                last_updated=datetime.now().isoformat()
            ),
            
            KnowledgeItem(
                id="task_management",
                title="Intelligenter Task-Manager",
                description="KI-gest√ºtzter Task-Scheduler mit automatischer Priorisierung",
                category="productivity",
                tags=["tasks", "scheduling", "automation"],
                content="""
‚è∞ INTELLIGENTER TASK-MANAGER

Der KI-Task-Manager hilft dir beim Organisieren und Priorisieren:

üéØ FEATURES:
‚Ä¢ Automatische Priorisierung basierend auf Deadlines
‚Ä¢ Kontextbasierte Erinnerungen
‚Ä¢ Energie-Level Ber√ºcksichtigung
‚Ä¢ Produktivit√§ts-Pattern Analyse

üìÖ SMART SCHEDULING:
‚Ä¢ Optimale Zeiten f√ºr verschiedene Aufgaben
‚Ä¢ Ber√ºcksichtigung deines Biorhythmus
‚Ä¢ Automatic Rescheduling bei Verz√∂gerungen
‚Ä¢ Integration mit Kalender-Apps

ü§ñ KI-UNTERST√úTZUNG:
‚Ä¢ Sch√§tzt Aufgabendauer automatisch
‚Ä¢ Erkennt √§hnliche Aufgaben
‚Ä¢ Schl√§gt Batch-Processing vor
‚Ä¢ Lernt aus deinen Gewohnheiten
                """,
                examples=[
                    "Sage: 'Erstelle Task: Pr√§sentation vorbereiten bis Freitag'",
                    "Sage: 'Zeige heutige Aufgaben'",
                    "Sage: 'Optimiere meinen Tagesplan'"
                ],
                related_items=["time_management", "productivity_tracking"],
                difficulty_level="intermediate",
                last_updated=datetime.now().isoformat()
            ),
            
            KnowledgeItem(
                id="file_organization",
                title="Automatische Datei-Organisation",
                description="KI-basierte Sortierung und Strukturierung von Dateien",
                category="organization",
                tags=["files", "automation", "organization"],
                content="""
üóÇÔ∏è AUTOMATISCHE DATEI-ORGANISATION

Toobix kann deine Dateien intelligent organisieren:

üìÅ SMART KATEGORISIERUNG:
‚Ä¢ Erkennt Dateitypen automatisch
‚Ä¢ Sortiert nach Inhalt und Kontext
‚Ä¢ Erstellt logische Ordnerstrukturen
‚Ä¢ Ber√ºcksichtigt deine Arbeitsweise

üîç ERWEITERTE ERKENNUNG:
‚Ä¢ Duplikat-Finder mit intelligenter Analyse
‚Ä¢ Inhaltsbasierte Gruppierung
‚Ä¢ Projekt-bezogene Sortierung
‚Ä¢ Temporal Clustering (nach Erstellungsdatum)

‚ö° BATCH-OPERATIONEN:
‚Ä¢ Organisiert komplette Verzeichnisse
‚Ä¢ Sichere Vorschau vor √Ñnderungen
‚Ä¢ Undo-Funktionalit√§t
‚Ä¢ Backup vor Reorganisation

üéØ ANPASSBARE REGELN:
‚Ä¢ Eigene Kategorien definieren
‚Ä¢ Ausnahme-Regeln erstellen
‚Ä¢ Workflow-basierte Sortierung
‚Ä¢ Lern-Algorithmus f√ºr Pr√§ferenzen
                """,
                examples=[
                    "Sage: 'Organisiere meinen Desktop'",
                    "Sage: 'Sortiere Downloads nach Kategorien'",
                    "Sage: 'Finde Duplikate in Dokumenten'"
                ],
                related_items=["backup_management", "cleanup_tools"],
                difficulty_level="beginner",
                last_updated=datetime.now().isoformat()
            )
        ]
        
        # === AI & INTELLIGENCE ===
        ai_items = [
            KnowledgeItem(
                id="hybrid_ai_system",
                title="Hybrid AI System",
                description="Kombination aus lokaler Ollama-KI und Cloud-Groq f√ºr optimale Performance",
                category="ai",
                tags=["ollama", "groq", "hybrid", "ai"],
                content="""
üß† HYBRID AI SYSTEM

Toobix nutzt das Beste aus beiden Welten:

üè† LOKALE KI (OLLAMA):
‚Ä¢ Gemma 3:1b Model f√ºr schnelle Antworten
‚Ä¢ Komplett offline und privat
‚Ä¢ Keine Daten√ºbertragung ins Internet
‚Ä¢ Optimiert f√ºr allt√§gliche Aufgaben

‚òÅÔ∏è CLOUD KI (GROQ):
‚Ä¢ Hochleistungs-Modelle f√ºr komplexe Anfragen
‚Ä¢ Fallback wenn lokale KI √ºberlastet
‚Ä¢ Spezialisiert auf schwierige Probleme
‚Ä¢ Ultra-schnelle Inferenz

üîÑ INTELLIGENTE UMSCHALTUNG:
‚Ä¢ Automatische Lastverteilung
‚Ä¢ Kontext-bewusste Modell-Auswahl
‚Ä¢ Failover-Mechanismen
‚Ä¢ Performance-Optimierung

üõ°Ô∏è PRIVACY-FIRST:
‚Ä¢ Lokale KI als Standard
‚Ä¢ Cloud nur bei Bedarf
‚Ä¢ Keine sensiblen Daten in der Cloud
‚Ä¢ Vollst√§ndige Kontrolle √ºber Daten
                """,
                examples=[
                    "Einfache Fragen ‚Üí Lokale Ollama KI",
                    "Komplexe Analysen ‚Üí Cloud Groq KI",
                    "System automatisch entscheidet optimal"
                ],
                related_items=["privacy_settings", "performance_tuning"],
                difficulty_level="advanced",
                last_updated=datetime.now().isoformat()
            ),
            
            KnowledgeItem(
                id="thought_stream",
                title="KI Gedankenstrom",
                description="Kontinuierlicher Stream von KI-Gedanken und Einsichten",
                category="ai",
                tags=["thoughts", "insights", "continuous"],
                content="""
üåä KI GEDANKENSTROM

Die KI denkt kontinuierlich mit und teilt Einsichten:

üí≠ GEDANKEN-TYPEN:
‚Ä¢ Insights: Wichtige Erkenntnisse
‚Ä¢ Suggestions: Handlungsvorschl√§ge  
‚Ä¢ Observations: Interessante Beobachtungen
‚Ä¢ Questions: Kl√§rende Nachfragen
‚Ä¢ Connections: Verbindungen zwischen Themen

üéØ INTELLIGENTE FILTERUNG:
‚Ä¢ Nur relevante Gedanken werden gezeigt
‚Ä¢ Priorit√§ts-basierte Auswahl
‚Ä¢ Kontext-sensitive Insights
‚Ä¢ Lernender Relevanz-Filter

‚ö° ECHTZEIT-VERARBEITUNG:
‚Ä¢ Kontinuierliche Hintergrund-Analyse
‚Ä¢ Proaktive Problemerkennung
‚Ä¢ Mustererkennung in deinem Verhalten
‚Ä¢ Automatische Optimierungsvorschl√§ge

üîó INTEGRATION:
‚Ä¢ Gedanken werden zu Chat-Nachrichten
‚Ä¢ Verbindung zu Smart Suggestions
‚Ä¢ Einfluss auf System-Entscheidungen
‚Ä¢ Personalisierte KI-Pers√∂nlichkeit
                """,
                examples=[
                    "Gedanke: 'Du arbeitest schon 2h - vielleicht eine Pause?'",
                    "Insight: 'Pattern erkannt: Du bist vormittags produktiver'",
                    "Suggestion: '√Ñhnliche Dateien in Projekt X gefunden'"
                ],
                related_items=["ai_personality", "productivity_insights"],
                difficulty_level="intermediate",
                last_updated=datetime.now().isoformat()
            )
        ]
        
        # === WELLNESS & LIFESTYLE ===
        wellness_items = [
            KnowledgeItem(
                id="wellness_engine",
                title="Creative Wellness Engine",
                description="Ganzheitliches Wellness-System mit Meditation, Atem√ºbungen und Soundscapes",
                category="wellness",
                tags=["meditation", "breathing", "soundscapes", "health"],
                content="""
üéµ CREATIVE WELLNESS ENGINE

Dein pers√∂nlicher Wellness-Begleiter f√ºr Work-Life-Balance:

üßò MEDITATION & ACHTSAMKEIT:
‚Ä¢ Gef√ºhrte Meditationen (5/10/15 Min)
‚Ä¢ Verschiedene Stile: Calm, Focus, Sleep
‚Ä¢ Binaural Beats f√ºr tiefere Entspannung
‚Ä¢ Fortschritts-Tracking und Statistiken

ü´Å ATEM√úBUNGEN:
‚Ä¢ 4-7-8 Breathing f√ºr Entspannung
‚Ä¢ Box Breathing f√ºr Fokus
‚Ä¢ Energizing Breath f√ºr Aktivierung
‚Ä¢ Adaptive Guidance basierend auf Stress-Level

üéº ADAPTIVE SOUNDSCAPES:
‚Ä¢ Konzentrations-Sounds (Focus Mode)
‚Ä¢ Kreativit√§ts-Soundscapes
‚Ä¢ Entspannungs-Ambient
‚Ä¢ Natur-Sounds mit r√§umlichem Audio

üìä WELLNESS-MONITORING:
‚Ä¢ Stress-Level Detection
‚Ä¢ Energy-Pattern Tracking
‚Ä¢ Produktivit√§ts-Korrelation
‚Ä¢ Automatische Pausen-Empfehlungen
                """,
                examples=[
                    "Sage: 'Starte 5-Minuten Meditation'",
                    "Sage: 'Beginne Atem√ºbung'",
                    "Sage: 'Spiele Focus-Soundscape ab'"
                ],
                related_items=["stress_management", "productivity_optimization"],
                difficulty_level="beginner",
                last_updated=datetime.now().isoformat()
            )
        ]
        
        # === AUTOMATION & SCRIPTING ===
        automation_items = [
            KnowledgeItem(
                id="smart_automation",
                title="Smart Automation Framework",
                description="Intelligente Automatisierung von wiederkehrenden Aufgaben",
                category="automation",
                tags=["automation", "scripts", "workflows"],
                content="""
ü§ñ SMART AUTOMATION FRAMEWORK

Automatisiere repetitive Aufgaben intelligent:

‚ö° AUTO-ERKENNUNG:
‚Ä¢ Identifiziert wiederholende Muster
‚Ä¢ Schl√§gt Automatisierung vor
‚Ä¢ Lernt aus deinem Verhalten
‚Ä¢ Erstellt Custom Workflows

üîß WORKFLOW-BUILDER:
‚Ä¢ Drag & Drop Interface
‚Ä¢ Trigger-basierte Aktionen
‚Ä¢ Conditional Logic
‚Ä¢ Multi-Step Sequences

üìÖ SCHEDULING:
‚Ä¢ Zeitbasierte Ausf√ºhrung
‚Ä¢ Event-getriggerte Aktionen
‚Ä¢ Kontext-sensitive Aktivierung
‚Ä¢ Smart Retry-Mechanismen

üéØ BEISPIEL-AUTOMATISIERUNGEN:
‚Ä¢ T√§glich Desktop aufr√§umen
‚Ä¢ Backup bei System-Shutdown
‚Ä¢ Notifications bei wichtigen Events
‚Ä¢ Automatic System Optimization
                """,
                examples=[
                    "Sage: 'Automatisiere meine Morgenroutine'",
                    "Sage: 'Erstelle Backup-Schedule'",
                    "Sage: 'Setup Smart Notifications'"
                ],
                related_items=["task_scheduling", "system_optimization"],
                difficulty_level="advanced",
                last_updated=datetime.now().isoformat()
            )
        ]
        
        # Speichere alle Items
        all_items = system_items + ai_items + wellness_items + automation_items
        for item in all_items:
            self.knowledge_base[item.id] = item
        
        # Erstelle Kategorien
        self.categories = {
            "system": KnowledgeCategory(
                id="system",
                name="System & Performance",
                description="Alles rund um System-Monitoring, Performance und Hardware",
                icon="üñ•Ô∏è",
                items=[item for item in all_items if item.category == "system"]
            ),
            "ai": KnowledgeCategory(
                id="ai",
                name="K√ºnstliche Intelligenz",
                description="KI-Features, Modelle und intelligente Funktionen",
                icon="üß†",
                items=[item for item in all_items if item.category == "ai"]
            ),
            "productivity": KnowledgeCategory(
                id="productivity",
                name="Produktivit√§t",
                description="Tools und Features f√ºr bessere Produktivit√§t",
                icon="üéØ",
                items=[item for item in all_items if item.category == "productivity"]
            ),
            "wellness": KnowledgeCategory(
                id="wellness",
                name="Wellness & Gesundheit",
                description="Features f√ºr Work-Life-Balance und Wohlbefinden",
                icon="üéµ",
                items=[item for item in all_items if item.category == "wellness"]
            ),
            "automation": KnowledgeCategory(
                id="automation",
                name="Automatisierung",
                description="Workflows, Scripts und automatisierte Prozesse",
                icon="ü§ñ",
                items=[item for item in all_items if item.category == "automation"]
            ),
            "organization": KnowledgeCategory(
                id="organization",
                name="Organisation",
                description="Datei-Management und strukturierte Organisation",
                icon="üóÇÔ∏è",
                items=[item for item in all_items if item.category == "organization"]
            )
        }
        
        # Erstelle Learning Paths
        self._create_learning_paths()
    
    def _create_learning_paths(self):
        """Erstellt strukturierte Lernpfade"""
        self.learning_paths = {
            "beginner_path": LearningPath(
                id="beginner_path",
                title="Toobix Grundlagen",
                description="Perfekter Einstieg in alle Toobix-Features",
                steps=[
                    "system_monitoring",
                    "file_organization", 
                    "wellness_engine",
                    "hybrid_ai_system"
                ],
                estimated_time=30,
                prerequisites=[]
            ),
            
            "productivity_master": LearningPath(
                id="productivity_master",
                title="Produktivit√§ts-Master",
                description="Werde zum Produktivit√§ts-Ninja mit Toobix",
                steps=[
                    "task_management",
                    "smart_automation",
                    "file_organization",
                    "thought_stream"
                ],
                estimated_time=45,
                prerequisites=["beginner_path"]
            ),
            
            "ai_expert": LearningPath(
                id="ai_expert",
                title="KI-Experte",
                description="Meistere alle KI-Features und verstehe das System",
                steps=[
                    "hybrid_ai_system",
                    "thought_stream", 
                    "smart_automation"
                ],
                estimated_time=35,
                prerequisites=["beginner_path"]
            )
        }
    
    def _build_search_index(self):
        """Erstellt Suchindex f√ºr schnelle Suche"""
        self.search_index = {}
        
        for item_id, item in self.knowledge_base.items():
            # Index f√ºr Titel, Beschreibung, Tags, Content
            searchable_text = f"{item.title} {item.description} {' '.join(item.tags)} {item.content}".lower()
            
            words = searchable_text.split()
            for word in words:
                if len(word) > 2:  # Ignoriere sehr kurze W√∂rter
                    if word not in self.search_index:
                        self.search_index[word] = []
                    if item_id not in self.search_index[word]:
                        self.search_index[word].append(item_id)
    
    def search(self, query: str, max_results: int = 10) -> List[KnowledgeItem]:
        """Sucht in der Wissensbasis"""
        query_words = query.lower().split()
        item_scores = {}
        
        for word in query_words:
            if word in self.search_index:
                for item_id in self.search_index[word]:
                    if item_id not in item_scores:
                        item_scores[item_id] = 0
                    item_scores[item_id] += 1
        
        # Sortiere nach Relevanz
        sorted_items = sorted(item_scores.items(), key=lambda x: x[1], reverse=True)
        
        results = []
        for item_id, score in sorted_items[:max_results]:
            item = self.knowledge_base[item_id]
            results.append(item)
        
        return results
    
    def get_category(self, category_id: str) -> Optional[KnowledgeCategory]:
        """Gibt Kategorie zur√ºck"""
        return self.categories.get(category_id)
    
    def get_all_categories(self) -> List[KnowledgeCategory]:
        """Gibt alle Kategorien zur√ºck"""
        return list(self.categories.values())
    
    def get_item(self, item_id: str) -> Optional[KnowledgeItem]:
        """Gibt spezifisches Wissenselement zur√ºck"""
        return self.knowledge_base.get(item_id)
    
    def get_related_items(self, item_id: str) -> List[KnowledgeItem]:
        """Gibt verwandte Elemente zur√ºck"""
        item = self.get_item(item_id)
        if not item:
            return []
        
        related = []
        for related_id in item.related_items:
            related_item = self.get_item(related_id)
            if related_item:
                related.append(related_item)
        
        return related
    
    def get_learning_path(self, path_id: str) -> Optional[LearningPath]:
        """Gibt Lernpfad zur√ºck"""
        return self.learning_paths.get(path_id)
    
    def get_all_learning_paths(self) -> List[LearningPath]:
        """Gibt alle Lernpfade zur√ºck"""
        return list(self.learning_paths.values())
    
    def track_usage(self, item_id: str):
        """Trackt Nutzung eines Elements"""
        if item_id in self.knowledge_base:
            self.knowledge_base[item_id].usage_count += 1
    
    def rate_item(self, item_id: str, rating: float):
        """Bewertet ein Wissenselement"""
        if item_id in self.knowledge_base and 0 <= rating <= 5:
            item = self.knowledge_base[item_id]
            # Einfacher Durchschnitt (k√∂nnte erweitert werden)
            current_rating = item.user_rating
            item.user_rating = (current_rating + rating) / 2
    
    def get_popular_items(self, limit: int = 5) -> List[KnowledgeItem]:
        """Gibt beliebte Elemente basierend auf Nutzung zur√ºck"""
        sorted_items = sorted(
            self.knowledge_base.values(),
            key=lambda x: x.usage_count,
            reverse=True
        )
        return sorted_items[:limit]
    
    def get_recommendations(self, based_on_item: str = None, user_interests: List[str] = None) -> List[KnowledgeItem]:
        """Gibt personalisierte Empfehlungen zur√ºck"""
        recommendations = []
        
        if based_on_item:
            # Empfehlungen basierend auf √§hnlichen Tags
            base_item = self.get_item(based_on_item)
            if base_item:
                for item in self.knowledge_base.values():
                    if item.id != based_on_item:
                        # Berechne Tag-√úberlappung
                        common_tags = set(base_item.tags) & set(item.tags)
                        if len(common_tags) >= 2:  # Mindestens 2 gemeinsame Tags
                            recommendations.append(item)
        
        elif user_interests:
            # Empfehlungen basierend auf Interessen
            for item in self.knowledge_base.values():
                for interest in user_interests:
                    if interest.lower() in [tag.lower() for tag in item.tags]:
                        if item not in recommendations:
                            recommendations.append(item)
        
        else:
            # Fallback: Beliebte Items
            recommendations = self.get_popular_items()
        
        return recommendations[:5]
    
    def export_knowledge_summary(self) -> Dict[str, Any]:
        """Exportiert Zusammenfassung der Wissensbasis"""
        return {
            "total_items": len(self.knowledge_base),
            "categories": len(self.categories),
            "learning_paths": len(self.learning_paths),
            "categories_overview": {
                cat_id: {
                    "name": cat.name,
                    "item_count": len(cat.items),
                    "description": cat.description
                }
                for cat_id, cat in self.categories.items()
            },
            "popular_items": [
                {"id": item.id, "title": item.title, "usage": item.usage_count}
                for item in self.get_popular_items()
            ],
            "last_updated": datetime.now().isoformat()
        }
